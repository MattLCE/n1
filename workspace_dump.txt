Dump generated on: Sat Apr 26 06:26:17 PM UTC 2025
--- Start of dump ---

--- File: .devcontainer/devcontainer.json ---
// .devcontainer/devcontainer.json
{
  "name": "n1-dev",
  "image": "mcr.microsoft.com/devcontainers/go:1.23",

  // Runs once, right after the container is created
  "postCreateCommand": "bash -c 'sudo apt-get update && sudo apt-get install -y sqlite3 sqlcipher && go env -w GOPRIVATE=github.com/n1/* && go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest'",


  // Runs every time VS Code attaches
  "postAttachCommand": "echo \"ðŸŽ‰  dev-container ready\""
}

--- End: .devcontainer/devcontainer.json ---

--- File: .gitattributes ---
# Auto detect text files and perform LF normalization
* text=auto

--- End: .gitattributes ---

--- File: .gitignore ---
# If you prefer the allow list template instead of the deny list, see community template:
# https://github.com/github/gitignore/blob/main/community/Golang/Go.AllowList.gitignore
#
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories (remove the comment below to include it)
# vendor/

# Go workspace file
go.work

--- End: .gitignore ---

--- File: .gitpod.yml ---
image: mcr.microsoft.com/devcontainers/go:1.22
ports:
  - port: 8080
    onOpen: open-preview

--- End: .gitpod.yml ---

--- File: LICENSE ---
MIT License

Copyright (c) 2025 Matthew Maier, Lifecycle Enterprises

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

--- End: LICENSE ---

--- File: Makefile ---
.PHONY: test lint vet

test:
	go test ./...

lint:
	golangci-lint run ./...

vet:
	go vet ./...

--- End: Makefile ---

--- File: README.md ---
# n1
 your digital Ironman suit

--- End: README.md ---

--- File: cmd/bosr/main.go ---
package main

import (
	"fmt"
)

const version = "0.0.1-dev"

func main() {
	fmt.Println("bosr version", version)
}

--- End: cmd/bosr/main.go ---

--- File: dump_workspace.sh ---
#!/bin/bash

# This script dumps the content of all files TRACKED by Git (respecting .gitignore)
# into workspace_dump.txt in the current directory, prefixed with a timestamp.

OUTPUT_FILE="workspace_dump.txt"

echo "Dumping TRACKED files to $OUTPUT_FILE..."

# --- Create/Truncate the file and write the timestamp first ---
echo "Dump generated on: $(date)" > "$OUTPUT_FILE"
echo "--- Start of dump ---" >> "$OUTPUT_FILE" # Optional separator
echo "" >> "$OUTPUT_FILE" # Add a blank line

# --- Append the file contents using the loop ---
git ls-files --exclude-standard | while IFS= read -r filename; do
  # Skip trying to dump the output file itself if git ls-files lists it
  if [[ "$filename" == "$OUTPUT_FILE" ]]; then
    continue
  fi

  echo "--- File: $filename ---"
  # Handle potential errors reading a file
  if cat "$filename"; then
    echo # Add newline after content only if cat succeeded
  else
    echo ">>> Error reading file: $filename <<<"
  fi
  echo "--- End: $filename ---"
  echo # Add blank line for separation
done >> "$OUTPUT_FILE" # <--- Use >> to APPEND to the file

echo "Dump complete: $OUTPUT_FILE"
--- End: dump_workspace.sh ---

--- File: go.mod ---
module github.com/n1/n1

go 1.23.8

require github.com/stretchr/testify v1.10.0

require (
	github.com/davecgh/go-spew v1.1.1 // indirect
	github.com/pmezard/go-difflib v1.0.0 // indirect
	gopkg.in/yaml.v3 v3.0.1 // indirect
)

--- End: go.mod ---

--- File: go.sum ---
github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=
github.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=

--- End: go.sum ---

--- File: internal/crypto/masterkey.go ---
package crypto

import "crypto/rand"

// Generate returns n random bytes.
func Generate(n int) ([]byte, error) {
	buf := make([]byte, n)
	_, err := rand.Read(buf)
	return buf, err
}

--- End: internal/crypto/masterkey.go ---

--- File: internal/crypto/masterkey_test.go ---
package crypto

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestGenerate(t *testing.T) {
	key, err := Generate(32)
	require.NoError(t, err)
	require.Len(t, key, 32)
}

--- End: internal/crypto/masterkey_test.go ---

--- File: internal/holdr/hold.go ---
package holdr

--- End: internal/holdr/hold.go ---

--- File: internal/sqlite/securedb.go ---
package sqlite

--- End: internal/sqlite/securedb.go ---

--- File: internal/sqlite/securedb_test.go ---
package sqlite_test // or package sqlite, depending on convention used

--- End: internal/sqlite/securedb_test.go ---

